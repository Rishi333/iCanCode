/* Generated By:JJTree&JavaCC: Do not edit this line. ExprParserTokenManager.java */
package wci.frontend;
import java.util.ArrayList;
import java.io.*;
import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import wci.intermediate.typeimpl.*;
import static wci.intermediate.typeimpl.TypeKeyImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

/** Token Manager. */
public class ExprParserTokenManager implements ExprParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x18000L) != 0L)
            return 49;
         if ((active0 & 0x6000L) != 0L)
            return 46;
         if ((active0 & 0x140000000000000L) != 0L)
         {
            jjmatchedKind = 77;
            return 20;
         }
         if ((active0 & 0xfebffe0000000000L) != 0L || (active1 & 0xfffL) != 0L)
         {
            jjmatchedKind = 77;
            return 23;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 71;
         if ((active0 & 0x10200010L) != 0L)
            return 1;
         if ((active0 & 0x500L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x400000000000L) != 0L)
            return 23;
         if ((active0 & 0xffffbe0000000000L) != 0L || (active1 & 0xfffL) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 1;
            return 23;
         }
         return -1;
      case 2:
         if ((active0 & 0xb0c0080000000000L) != 0L || (active1 & 0x28L) != 0L)
            return 23;
         if ((active0 & 0x4f3fb60000000000L) != 0L || (active1 & 0xfd7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 2;
            }
            return 23;
         }
         return -1;
      case 3:
         if ((active0 & 0xf34960000000000L) != 0L || (active1 & 0xff5L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 3;
            }
            return 23;
         }
         if ((active0 & 0x400b200000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 23;
         return -1;
      case 4:
         if ((active0 & 0xe16140000000000L) != 0L || (active1 & 0xff5L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
            return 23;
         }
         if ((active0 & 0x120820000000000L) != 0L)
            return 23;
         return -1;
      case 5:
         if ((active0 & 0xc16000000000000L) != 0L || (active1 & 0x835L) != 0L)
            return 23;
         if ((active0 & 0x200140000000000L) != 0L || (active1 & 0x7c0L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
            return 23;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x740L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
            return 23;
         }
         if ((active0 & 0x200040000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 23;
         return -1;
      case 7:
         if ((active0 & 0x100000000000L) != 0L || (active1 & 0x500L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
            return 23;
         }
         if ((active1 & 0x240L) != 0L)
            return 23;
         return -1;
      case 8:
         if ((active1 & 0x500L) != 0L)
            return 23;
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 8;
            return 23;
         }
         return -1;
      case 9:
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 36:
         return jjStopAtPos(0, 12);
      case 38:
         return jjStartNfaWithStates_0(0, 8, 9);
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 31);
      case 42:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 43:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x2400000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 37);
      case 45:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x4800000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 40, 71);
      case 47:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x10000010L, 0x0L);
      case 58:
         return jjStopAtPos(0, 38);
      case 59:
         return jjStopAtPos(0, 24);
      case 60:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 61:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 62:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 34);
      case 93:
         return jjStopAtPos(0, 35);
      case 96:
         return jjStopAtPos(0, 9);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x808L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200800000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x140000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c4L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80400000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000020000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4040000000000L, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2810000000000000L, 0x420L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 32);
      case 124:
         return jjStartNfaWithStates_0(0, 10, 9);
      case 125:
         return jjStopAtPos(0, 33);
      case 126:
         return jjStopAtPos(0, 39);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 43:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 45:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 61:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1008200000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa004040000000000L, active1, 0x1f4L);
      case 102:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 23);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x103000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x640020000000000L, active1, 0x202L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x900000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x401L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x401L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 23);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x300100000000000L, active1, 0L);
      case 112:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400b000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 23);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 23);
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x1e4L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x180L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x24L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100820000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x220000000000000L, active1, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x224L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x200100000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x81L);
      case 107:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 23);
         break;
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x840L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x500L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 99:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 23);
         break;
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x40L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 23);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 23);
         break;
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 23);
         break;
      case 103:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 23);
         break;
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L);
      case 108:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 23);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 23);
         break;
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x500L);
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x500L);
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 23);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x500L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 23);
         break;
      case 120:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 23);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 74, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(11, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 71;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if (curChar == 60)
                     jjCheckNAdd(9);
                  if (curChar == 60)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddStates(0, 5);
                  }
                  else if ((0x800000a400000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if ((0x100000600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 62)
                     jjAddStates(6, 7);
                  else if (curChar == 60)
                     jjAddStates(8, 9);
                  else if (curChar == 46)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(10, 12);
                  }
                  else if (curChar == 38)
                     jjCheckNAdd(9);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAddTwoStates(52, 53);
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddStates(13, 20);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAddStates(21, 24);
                  }
                  else if (curChar == 37)
                     jjCheckNAdd(9);
                  break;
               case 20:
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(23);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(25, 28);
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAdd(42);
                  }
                  break;
               case 49:
                  if (curChar == 62)
                     jjCheckNAdd(9);
                  if (curChar == 62)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 1:
                  if (curChar == 47)
                     jjCheckNAddStates(29, 31);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 8:
                  if ((0x800000a400000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (curChar == 61 && kind > 7)
                     kind = 7;
                  break;
               case 11:
                  if (curChar == 37)
                     jjCheckNAdd(9);
                  break;
               case 12:
                  if (curChar == 38)
                     jjCheckNAdd(9);
                  break;
               case 24:
               case 32:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(13, 20);
                  break;
               case 25:
                  if ((0x83ff00a400000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(13, 20);
                  break;
               case 26:
                  if (curChar != 61)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(13, 20);
                  break;
               case 28:
                  if (curChar == 38)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if (curChar == 37)
                     jjCheckNAdd(26);
                  break;
               case 31:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(32, 40);
                  break;
               case 33:
                  if (curChar == 62)
                     jjAddStates(41, 42);
                  break;
               case 34:
                  if (curChar == 62)
                     jjCheckNAdd(26);
                  break;
               case 35:
                  if (curChar != 62)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(13, 20);
                  break;
               case 36:
                  if (curChar == 60)
                     jjAddStates(43, 44);
                  break;
               case 37:
                  if (curChar == 60)
                     jjCheckNAdd(26);
                  break;
               case 38:
                  if (curChar != 60)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddStates(13, 20);
                  break;
               case 39:
                  if (curChar != 46)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(10, 12);
                  break;
               case 41:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(25, 28);
                  break;
               case 44:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 94)
                     kind = 94;
                  break;
               case 45:
                  if (curChar == 60)
                     jjAddStates(8, 9);
                  break;
               case 47:
                  if (curChar == 60)
                     jjCheckNAdd(9);
                  break;
               case 48:
                  if (curChar == 62)
                     jjAddStates(6, 7);
                  break;
               case 50:
                  if (curChar == 62)
                     jjCheckNAdd(9);
                  break;
               case 51:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if (curChar != 48)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddStates(21, 24);
                  break;
               case 55:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(55);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(58);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddStates(0, 5);
                  break;
               case 62:
                  if (curChar != 46)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if (curChar != 46)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(45, 47);
                  break;
               case 66:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(48, 51);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(52, 57);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddStates(58, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 94)
                     kind = 94;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(23);
                  }
                  else if ((0x40000001L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 124)
                     jjCheckNAdd(9);
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 94)
                     jjCheckNAdd(9);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAdd(23);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 71:
               case 40:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjAddStates(61, 62);
                  break;
               case 2:
                  jjAddStates(29, 31);
                  break;
               case 8:
                  if ((0x40000001L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if (curChar == 124)
                     jjCheckNAdd(9);
                  break;
               case 13:
                  if (curChar == 94)
                     jjCheckNAdd(9);
                  break;
               case 14:
                  if (curChar == 101 && kind > 76)
                     kind = 76;
                  break;
               case 15:
                  if (curChar == 117)
                     jjCheckNAdd(14);
                  break;
               case 16:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 115)
                     jjCheckNAdd(14);
                  break;
               case 19:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAdd(23);
                  break;
               case 25:
                  if ((0x7fffffec7ffffffL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjAddStates(13, 20);
                  break;
               case 27:
                  if (curChar == 94)
                     jjCheckNAdd(26);
                  break;
               case 30:
                  if (curChar == 124)
                     jjCheckNAdd(26);
                  break;
               case 44:
                  if (kind > 94)
                     kind = 94;
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAdd(57);
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(60);
                  break;
               case 65:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjAddStates(63, 64);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 94)
                     kind = 94;
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(29, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   62, 64, 65, 66, 69, 70, 49, 50, 46, 47, 40, 41, 43, 25, 27, 28, 
   29, 30, 31, 33, 36, 55, 56, 58, 59, 40, 41, 42, 43, 2, 3, 5, 
   25, 32, 27, 28, 29, 30, 31, 33, 36, 34, 35, 37, 38, 65, 66, 68, 
   65, 66, 67, 68, 64, 65, 66, 67, 68, 69, 62, 63, 70, 41, 42, 66, 
   67, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\46", "\140", "\174", "\41", 
"\44", "\74", "\74\75", "\76", "\76\75", "\41\75", "\53", "\55", "\52", "\57", 
"\53\53", "\55\55", "\73", "\53\75", "\55\75", "\52\75", "\57\75", "\75", "\50", "\51", 
"\173", "\175", "\133", "\135", "\75\75", "\54", "\72", "\176", "\56", 
"\154\157\143\141\154", "\162\145\141\144\111\156\164", "\160\165\164", 
"\120\162\157\143\145\144\165\162\145\40\72\72", "\103\141\154\154", "\151\146", "\142\162\145\141\153", "\145\154\163\145", 
"\145\154\163\145\151\146", "\162\145\164\165\162\156", "\143\141\163\145", "\163\167\151\164\143\150", 
"\167\150\151\154\145", "\146\157\162", "\151\156\164", "\146\154\157\141\164", 
"\142\157\157\154\145\141\156", "\144\157\165\142\154\145", "\163\164\162\151\156\147", "\155\141\160", 
"\163\145\164", "\154\151\163\164", "\156\145\167", "\160\165\142\154\151\143", 
"\166\157\151\144", "\147\145\164\126\141\154", "\141\144\144", "\162\145\155\157\166\145", 
"\163\145\164\126\141\154", "\147\145\164\111\156\144\145\170", "\147\145\164\123\151\172\145", 
"\147\145\164\123\164\162\151\156\147", "\143\157\156\164\141\151\156\163", "\163\165\142\163\164\162\151\156\147", 
"\141\160\160\145\156\144", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x403fffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x40L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[71];
static private final int[] jjstateSet = new int[142];
static protected char curChar;
/** Constructor. */
public ExprParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ExprParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 71; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
