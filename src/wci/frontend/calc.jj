/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. calc.jj */
/*@egen*/options{
                                                            
               
                 
DEBUG_PARSER=false;
}
PARSER_BEGIN(ExprParser)
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import wci.intermediate.typeimpl.*;
import static wci.intermediate.typeimpl.TypeKeyImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class ExprParser/*@bgen(jjtree)*/implements ExprParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTExprParserState jjtree = new JJTExprParserState();

/*@egen*/

    private static final String SOURCE_SUFFIX = ".txt";
    private static final String OUTPUT_SUFFIX = ".j";

    private static TypeSpec type;
    private static boolean typeBool=false;

    private static SymTabStack symTabStack;
    private static SymTabEntry programId;
    private static int index=0;
    private static boolean errorThrown = false;

    public static void main(String[] args)
        throws Exception
    {
    	// Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

 // Parse a program.
        Reader    reader = new FileReader(args[0]);
        ExprParser parser = new ExprParser(reader);
	SimpleNode rootNode= parser.Program();
		   
	
        // Print the cross-reference table.
       // CrossReferencer crossReferencer = new CrossReferencer();
        //crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        ExprParserVisitorAdapter typeVisitor = new ExprParserVisitorAdapter();
        rootNode.jjtAccept(typeVisitor, rootNode);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);
        
        // Print the parse tree.
        //ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        //treePrinter.print(symTabStack);

        // Process the source file path which ends in .pcl
        // and create the output file path which ends in .j
        String sourceFilePath = args[0];
        int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
        int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
        String objectFilePath = (suffixIndex == truncatedLength)
            ?  "OutputFiles/" +sourceFilePath.substring(0, truncatedLength) +OUTPUT_SUFFIX
            : "OutputFiles/" + sourceFilePath + OUTPUT_SUFFIX;
        if(errorThrown==false){
            // Create the compiler backend and generate code.
            Backend backend = BackendFactory.createBackend("compile");
            backend.process(iCode, symTabStack, objectFilePath);
            System.out.println("Parsing has ended and .j file has been generated!");            
        }else{// Print error
            System.out.println("Error(s) have been thrown, please fix and recompile");
        }
	}


    }

PARSER_END(ExprParser)


SKIP : {
   <IGNORE : [" " , "\n", "\t"]> |
   <SINGLELINECOMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| < NEWLINE: ["\n", "\r"] >
}
SKIP :
{
  "/*" : WithinComment

}
<WithinComment> SKIP :
{
  "*/" : DEFAULT

}

<WithinComment> MORE :
{
  <~[]>
}

TOKEN:
{

<SPECIALSYMBOL:  "@" | "%" | "^" |
 "?" | "\'"  | "<<" | ">>" | "|=" | "%="|
"&=" | "^="   | "<<=" | ">>=" |"\""   >


|
<SSAnd: "&">

|
<SSFunc: "`">

|
<SSOr: "|">

|
<SSNot: "!">

|
<SSDollar : "$">

|
<SSL: "<">

|
<SSLE: "<=">

|
<SSG: ">">

|
<SSGE: ">=">

|
<SSNE: "!=">

|
<SSPlus: "+">

|
<SSMinus: "-">

|
<SSStar: "*">

|
<SSDivide: "/">

|
<SSplusplus: "++">

|
<SSminusminus: "--">

|
<SSSemiColon: ";">

|
<SSPlusEquals: "+=">

|
<SSMinusEquals: "-=">

|
<SSMultEquals: "*=">

|
<SSDivideEquals: "/=">

|
<SSEquals: "=">

|

<SSOpenParen : "(">

|
<SSCloseParen : ")">

|
<SSOpenBraces : "{">

|
<SSCloseBraces : "}">

|
<SSOpenBracket : "[">

|
<SSCloseBracket : "]">

|
<ComparisonEquals : "==">

|
<SSComma : ",">

|
<SSColon : ":">
|
<SSTilda : "~">
|
<SSDot:".">
}

TOKEN : {
<RESERVEDWORDLOCAL : "local">
|
<RESERVEDWORDREADINT :"readInt">
|
 <RESERVEDWORDPRINT :"put">
|
 <RESERVEDWORDPROCEDURE :"Procedure ::">
|
 <RESERVEDWORDCALL :"Call">
| <RESERVEDWORDIF :"if">

 |<RESERVEDWORDBREAK :"break">

 |<RESERVEDWORDELSE :"else">

 |<RESERVEDWORDELSEIF :"elseif">

 |<RESERVEDWORDRETURN :"return">

 |<RESERVEDWORDCASE :"case">

|<RESERVEDWORDSWITCH :"switch">

|<RESERVEDWORDWHILE :"while">

 |<RESERVEDWORDFOR :"for">



|<RESERVEDWORDINT :"int">

 |<RESERVEDWORDFLOAT :"float">

|<RESERVEDWORDBOOLEAN :"boolean">

|<RESERVEDWORDDOUBLE :"double">

|<RESERVEDWORDSTRING :"string">

|<RESERVEDWORDHASHMAP :"map">

|<RESERVEDWORDSET :"set">

 |<RESERVEDWORDLIST :"list">
 |<RESERVEDWORDNEW :"new">
|<RESERVEDWORDPUBLIC :"public">
|<RESERVEDWORDVOID :"void">
|<DOTGETVAL: "getVal">|
<DOTADD: "add">|
<DOTREMOVE: "remove">|
<DOTSETVAL: "setVal">|
<DOTGETINDEX: "getIndex">
|<DOTGETSIZE: "getSize">
|<DOTGETSTRING: "getString">
|<DOTCONTAINS: "contains">
|<DOTSUBSTRING: "substring">
|<DOTAPPEND: "append">
 |<BOOLEAN :"true"|"false"> 
| <IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> )*>
|<STRING:(<SINGLEQUOTE>|<DOUBLEQUOTE>)(<LETTER>|<DIGIT>|(<IGNORE>)*|<SPECIALSYMBOL> |<IGNORE> (<SINGLEQUOTE>|<DOUBLEQUOTE>))*  >
|<INTEGER: <DECIMALINTEGER>|<OCTALINTEGER>|<HEXINTEGER>>
| <DECIMALINTEGER : <NONZERO> (<DIGIT> )*>
| <OCTALINTEGER : <ZERO>(<OCTALS> )*>
| <HEXINTEGER : "0"("x"|"X")(<DIGIT>|<HEXLETTERS>)(<DIGIT>|<HEXLETTERS> )*>
| <DOUBLE : <DIGIT>(<DIGIT>)* ("."|"")(<DIGIT>)*>
| <REALNUMBER : (<DIGIT>(<DIGIT>)* ("."|"")(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>
| <REAL_NUMBER : ("."(<DIGIT>)* ("e"|"E"|"")("+"|"-"|"")(<DIGIT>)*)>


 | <#SINGLEQUOTE:["\'"]>
 | <#DOUBLEQUOTE:["\""]>
 | <#HEXLETTERS:["A"-"F","a"-"f"]>
 | <#DIGIT  : ["0"-"9"]>
 | <#NONZERO  : ["1"-"9"]>
 | <#LETTER : ["a"-"z","A"-"Z","_"]>
 | <#OCTALS: ["0"-"7"]>
 | <#ZERO : ["0"]>
 | <ERROR   : (~["\r", "\n"])>
}

JAVACODE
String handleError(Token token)
{/*@bgen(jjtree) handleError */
 ASThandleError jjtn000 = new ASThandleError(JJTHANDLEERROR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/
    System.out.println("*** ERROR: Line " + token.beginLine +
                       " after \"" + token.image + "\"");

    Token t;

    
        t = getNextToken();
   
    errorThrown = true;// throw error so we do not compile backend
    return t.image;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Error() : {/*@bgen(jjtree) Error */
  ASTError jjtn000 = new ASTError(JJTERROR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Error */
try {
/*@egen*/
<ERROR>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/       
}
       
SimpleNode Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
try {
/*@egen*/

(try{
<IDENTIFIER> {
	programId = symTabStack.enterLocal(token.image);
        programId.setDefinition(DefinitionImpl.PROGRAM);
        programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        symTabStack.setProgramId(programId);
//  deprecated      index=0;// Every procedure has new indx at 0

}<SSOpenBraces>
(Procedure())*
<SSCloseBraces>
}catch(ParseException ex){
handleError(ex.currentToken);
System.out.println("Main Program Structure thrown!");
})/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{

return jjtn000;
}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void ProcedureCall() :{/*@bgen(jjtree) ProcedureCall */
  ASTProcedureCall jjtn000 = new ASTProcedureCall(JJTPROCEDURECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ProcedureCall */
 try {
/*@egen*/
 <RESERVEDWORDCALL> <IDENTIFIER>{
jjtn000.setAttribute(VALUE,token.image);
}
 (ValuePass())?<SSSemiColon>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Procedure() : {/*@bgen(jjtree) Procedure */
  ASTProcedure jjtn000 = new ASTProcedure(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Procedure */
try {
/*@egen*/
(<RESERVEDWORDPROCEDURE> <IDENTIFIER>{
jjtn000.setAttribute(VALUE, token.image);}
(Parameters())?<SSOpenBraces> Commands() <SSCloseBraces>
)/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Parameters():{/*@bgen(jjtree) Parameters */
                   ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) Parameters */
try {
/*@egen*/
<SSFunc>(type=PrimitiveType() variableDecl(type) )*<SSFunc>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ValuePass():{/*@bgen(jjtree) ValuePass */
                  ASTValuePass jjtn000 = new ASTValuePass(JJTVALUEPASS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) ValuePass */
try {
/*@egen*/
<SSOpenParen>(type=PrimitiveType()  variable())*<SSCloseParen>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Commands() : {/*@bgen(jjtree) Commands */
  ASTCommands jjtn000 = new ASTCommands(JJTCOMMANDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Commands */
        try {
/*@egen*/
	(try {
	(IfPart() | SwitchPart()|For()|While()|Statement()| ProcedureCall()| DataTypes()|PrintStatement()|Error() )*
	}catch (ParseException ex) {
        handleError(ex.currentToken);
	Commands();// Recursive call to continue error handling
    	})/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void PrintStatement() : {/*@bgen(jjtree) PrintStatement */
  ASTPrintStatement jjtn000 = new ASTPrintStatement(JJTPRINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PrintStatement */
try {
/*@egen*/
<RESERVEDWORDPRINT> Expr()(<SSComma> Expr())*<SSSemiColon>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Literal() : {/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Literal */
try {
/*@egen*/
StringConst() | IntegerConst() |FloatConst() | BooleanConst()|DoubleConst()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
TypeSpec PrimitiveType()      : {}
{
  <RESERVEDWORDINT> {return Predefined.integerType;}
  |<RESERVEDWORDSTRING>{return Predefined.stringType;}
  |<RESERVEDWORDDOUBLE>{return Predefined.doubleType;}
  |<RESERVEDWORDFLOAT>{return Predefined.floatType;}
  |<RESERVEDWORDBOOLEAN>{return Predefined.booleanType;}


}



void IntegerConst() : {/*@bgen(jjtree) IntegerConst */
  ASTIntegerConst jjtn000 = new ASTIntegerConst(JJTINTEGERCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IntegerConst */
        try {
/*@egen*/
	(<INTEGER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
        if(Predefined.integerType!=type && typeBool){
            System.out.println("Type Check Error This is not a Integer Line "+ token.beginLine);
        }
        typeBool=false;
    })|<RESERVEDWORDREADINT>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/{
        jjtn000.setAttribute(VALUE, "Input");
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void BooleanConst() : {/*@bgen(jjtree) BooleanConst */
  ASTBooleanConst jjtn000 = new ASTBooleanConst(JJTBOOLEANCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BooleanConst */
        try {
/*@egen*/
	<BOOLEAN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        if(Predefined.booleanType!=type && typeBool){
            System.out.println("Type Check Error This is not a Boolean Line "+ token.beginLine);
        }
        typeBool=false;
        jjtn000.setTypeSpec(Predefined.booleanType);
        jjtn000.setAttribute(VALUE, Boolean.valueOf(token.image));
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void FloatConst() : {/*@bgen(jjtree) FloatConst */
  ASTFloatConst jjtn000 = new ASTFloatConst(JJTFLOATCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FloatConst */
    try {
/*@egen*/
    (<REALNUMBER>|<REAL_NUMBER>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if(Predefined.realType!=type && typeBool){
            System.out.println("Type Check Error This is not a Float Line "+ token.beginLine);
        }
        typeBool=false;
        jjtn000.setTypeSpec(Predefined.floatType);
        jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DoubleConst() : {/*@bgen(jjtree) DoubleConst */
  ASTDoubleConst jjtn000 = new ASTDoubleConst(JJTDOUBLECONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoubleConst */
    try {
/*@egen*/
    <DOUBLE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if(Predefined.doubleType!=type && typeBool){
            System.out.println("Type Check Error This is not a Double Line "+ token.beginLine);
        }
        typeBool=false;
        jjtn000.setTypeSpec(Predefined.doubleType);
        jjtn000.setAttribute(VALUE, Double.parseDouble(token.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StringConst() : {/*@bgen(jjtree) StringConst */
  ASTStringConst jjtn000 = new ASTStringConst(JJTSTRINGCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringConst */
        try {
/*@egen*/
	<STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        if(Predefined.stringType!=type && typeBool){
            System.out.println("Type Check Error This is not a String Line "+token.beginLine);
        }
        typeBool=false;
        jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, token.image.substring(1,token.image.length()-1));
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Expr()     : {}
{
   SimpleExpr() ( (<SSNE>/*@bgen(jjtree) #NotEquals( 2) */
                         {
                           ASTNotEquals jjtn001 = new ASTNotEquals(JJTNOTEQUALS);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*/SimpleExpr()/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
                         }
/*@egen*/              | <SSL>/*@bgen(jjtree) #LessThan( 2) */
                                                          {
                                                            ASTLessThan jjtn002 = new ASTLessThan(JJTLESSTHAN);
                                                            boolean jjtc002 = true;
                                                            jjtree.openNodeScope(jjtn002);
                                                          }
                                                          try {
/*@egen*/SimpleExpr()/*@bgen(jjtree)*/
                                                          } catch (Throwable jjte002) {
                                                            if (jjtc002) {
                                                              jjtree.clearNodeScope(jjtn002);
                                                              jjtc002 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte002 instanceof RuntimeException) {
                                                              throw (RuntimeException)jjte002;
                                                            }
                                                            if (jjte002 instanceof ParseException) {
                                                              throw (ParseException)jjte002;
                                                            }
                                                            throw (Error)jjte002;
                                                          } finally {
                                                            if (jjtc002) {
                                                              jjtree.closeNodeScope(jjtn002,  2);
                                                            }
                                                          }
/*@egen*/              |<SSLE>/*@bgen(jjtree) #LessEquals( 2) */
                                                                                           {
                                                                                             ASTLessEquals jjtn003 = new ASTLessEquals(JJTLESSEQUALS);
                                                                                             boolean jjtc003 = true;
                                                                                             jjtree.openNodeScope(jjtn003);
                                                                                           }
                                                                                           try {
/*@egen*/SimpleExpr()/*@bgen(jjtree)*/
                                                                                           } catch (Throwable jjte003) {
                                                                                             if (jjtc003) {
                                                                                               jjtree.clearNodeScope(jjtn003);
                                                                                               jjtc003 = false;
                                                                                             } else {
                                                                                               jjtree.popNode();
                                                                                             }
                                                                                             if (jjte003 instanceof RuntimeException) {
                                                                                               throw (RuntimeException)jjte003;
                                                                                             }
                                                                                             if (jjte003 instanceof ParseException) {
                                                                                               throw (ParseException)jjte003;
                                                                                             }
                                                                                             throw (Error)jjte003;
                                                                                           } finally {
                                                                                             if (jjtc003) {
                                                                                               jjtree.closeNodeScope(jjtn003,  2);
                                                                                             }
                                                                                           }
/*@egen*/               |<SSG>/*@bgen(jjtree) #GreaterThan( 2) */
                                                                                                                             {
                                                                                                                               ASTGreaterThan jjtn004 = new ASTGreaterThan(JJTGREATERTHAN);
                                                                                                                               boolean jjtc004 = true;
                                                                                                                               jjtree.openNodeScope(jjtn004);
                                                                                                                             }
                                                                                                                             try {
/*@egen*/ SimpleExpr()/*@bgen(jjtree)*/
                                                                                                                             } catch (Throwable jjte004) {
                                                                                                                               if (jjtc004) {
                                                                                                                                 jjtree.clearNodeScope(jjtn004);
                                                                                                                                 jjtc004 = false;
                                                                                                                               } else {
                                                                                                                                 jjtree.popNode();
                                                                                                                               }
                                                                                                                               if (jjte004 instanceof RuntimeException) {
                                                                                                                                 throw (RuntimeException)jjte004;
                                                                                                                               }
                                                                                                                               if (jjte004 instanceof ParseException) {
                                                                                                                                 throw (ParseException)jjte004;
                                                                                                                               }
                                                                                                                               throw (Error)jjte004;
                                                                                                                             } finally {
                                                                                                                               if (jjtc004) {
                                                                                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                                                                                               }
                                                                                                                             }
/*@egen*/                |<SSGE>/*@bgen(jjtree) #GreaterEquals( 2) */
                                                                                                                                                                {
                                                                                                                                                                  ASTGreaterEquals jjtn005 = new ASTGreaterEquals(JJTGREATEREQUALS);
                                                                                                                                                                  boolean jjtc005 = true;
                                                                                                                                                                  jjtree.openNodeScope(jjtn005);
                                                                                                                                                                }
                                                                                                                                                                try {
/*@egen*/SimpleExpr()/*@bgen(jjtree)*/
                                                                                                                                                                } catch (Throwable jjte005) {
                                                                                                                                                                  if (jjtc005) {
                                                                                                                                                                    jjtree.clearNodeScope(jjtn005);
                                                                                                                                                                    jjtc005 = false;
                                                                                                                                                                  } else {
                                                                                                                                                                    jjtree.popNode();
                                                                                                                                                                  }
                                                                                                                                                                  if (jjte005 instanceof RuntimeException) {
                                                                                                                                                                    throw (RuntimeException)jjte005;
                                                                                                                                                                  }
                                                                                                                                                                  if (jjte005 instanceof ParseException) {
                                                                                                                                                                    throw (ParseException)jjte005;
                                                                                                                                                                  }
                                                                                                                                                                  throw (Error)jjte005;
                                                                                                                                                                } finally {
                                                                                                                                                                  if (jjtc005) {
                                                                                                                                                                    jjtree.closeNodeScope(jjtn005,  2);
                                                                                                                                                                  }
                                                                                                                                                                }
/*@egen*/                 |<ComparisonEquals>/*@bgen(jjtree) #Equals( 2) */
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  ASTEquals jjtn006 = new ASTEquals(JJTEQUALS);
                                                                                                                                                                                                                  boolean jjtc006 = true;
                                                                                                                                                                                                                  jjtree.openNodeScope(jjtn006);
                                                                                                                                                                                                                }
                                                                                                                                                                                                                try {
/*@egen*/SimpleExpr()/*@bgen(jjtree)*/
                                                                                                                                                                                                                } catch (Throwable jjte006) {
                                                                                                                                                                                                                  if (jjtc006) {
                                                                                                                                                                                                                    jjtree.clearNodeScope(jjtn006);
                                                                                                                                                                                                                    jjtc006 = false;
                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                    jjtree.popNode();
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (jjte006 instanceof RuntimeException) {
                                                                                                                                                                                                                    throw (RuntimeException)jjte006;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (jjte006 instanceof ParseException) {
                                                                                                                                                                                                                    throw (ParseException)jjte006;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  throw (Error)jjte006;
                                                                                                                                                                                                                } finally {
                                                                                                                                                                                                                  if (jjtc006) {
                                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn006,  2);
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
/*@egen*/           ))* 
}
void SimpleExpr()      : {}
{
 Term() (<SSPlus>/*@bgen(jjtree) #add( 2) */
                   {
                     ASTadd jjtn001 = new ASTadd(JJTADD);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/  Term()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
                   }
/*@egen*/        |<SSMinus>/*@bgen(jjtree) #subtract( 2) */
                                             {
                                               ASTsubtract jjtn002 = new ASTsubtract(JJTSUBTRACT);
                                               boolean jjtc002 = true;
                                               jjtree.openNodeScope(jjtn002);
                                             }
                                             try {
/*@egen*/  Term()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte002) {
                                               if (jjtc002) {
                                                 jjtree.clearNodeScope(jjtn002);
                                                 jjtc002 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte002 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte002;
                                               }
                                               if (jjte002 instanceof ParseException) {
                                                 throw (ParseException)jjte002;
                                               }
                                               throw (Error)jjte002;
                                             } finally {
                                               if (jjtc002) {
                                                 jjtree.closeNodeScope(jjtn002,  2);
                                               }
                                             }
/*@egen*/             |<SSOr>/*@bgen(jjtree) #or( 2) */
                                                                         {
                                                                           ASTor jjtn003 = new ASTor(JJTOR);
                                                                           boolean jjtc003 = true;
                                                                           jjtree.openNodeScope(jjtn003);
                                                                         }
                                                                         try {
/*@egen*/  Term()/*@bgen(jjtree)*/
                                                                         } catch (Throwable jjte003) {
                                                                           if (jjtc003) {
                                                                             jjtree.clearNodeScope(jjtn003);
                                                                             jjtc003 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte003 instanceof RuntimeException) {
                                                                             throw (RuntimeException)jjte003;
                                                                           }
                                                                           if (jjte003 instanceof ParseException) {
                                                                             throw (ParseException)jjte003;
                                                                           }
                                                                           throw (Error)jjte003;
                                                                         } finally {
                                                                           if (jjtc003) {
                                                                             jjtree.closeNodeScope(jjtn003,  2);
                                                                           }
                                                                         }
/*@egen*/       )*

}

void Term ()      : {}
{
  Factor() ( <SSStar>/*@bgen(jjtree) #multiply( 2) */
                      {
                        ASTmultiply jjtn001 = new ASTmultiply(JJTMULTIPLY);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ Factor()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/             |<SSDivide>/*@bgen(jjtree) #divide( 2) */
                                                       {
                                                         ASTdivide jjtn002 = new ASTdivide(JJTDIVIDE);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
                                                       }
                                                       try {
/*@egen*/ Factor()/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte002) {
                                                         if (jjtc002) {
                                                           jjtree.clearNodeScope(jjtn002);
                                                           jjtc002 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte002 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte002;
                                                         }
                                                         if (jjte002 instanceof ParseException) {
                                                           throw (ParseException)jjte002;
                                                         }
                                                         throw (Error)jjte002;
                                                       } finally {
                                                         if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                         }
                                                       }
/*@egen*/           |<SSAnd>/*@bgen(jjtree) #and( 2) */
                                                                                   {
                                                                                     ASTand jjtn003 = new ASTand(JJTAND);
                                                                                     boolean jjtc003 = true;
                                                                                     jjtree.openNodeScope(jjtn003);
                                                                                   }
                                                                                   try {
/*@egen*/ Factor()/*@bgen(jjtree)*/
                                                                                   } catch (Throwable jjte003) {
                                                                                     if (jjtc003) {
                                                                                       jjtree.clearNodeScope(jjtn003);
                                                                                       jjtc003 = false;
                                                                                     } else {
                                                                                       jjtree.popNode();
                                                                                     }
                                                                                     if (jjte003 instanceof RuntimeException) {
                                                                                       throw (RuntimeException)jjte003;
                                                                                     }
                                                                                     if (jjte003 instanceof ParseException) {
                                                                                       throw (ParseException)jjte003;
                                                                                     }
                                                                                     throw (Error)jjte003;
                                                                                   } finally {
                                                                                     if (jjtc003) {
                                                                                       jjtree.closeNodeScope(jjtn003,  2);
                                                                                     }
                                                                                   }
/*@egen*/         )*
}

void Factor()      : {}
{
LOOKAHEAD(3)getters()
|   LOOKAHEAD(3) variable()
|(IntegerConst()|FloatConst()|StringConst()|DoubleConst())
|(<SSNot>/*@bgen(jjtree) #Negate( 1) */
          {
            ASTNegate jjtn001 = new ASTNegate(JJTNEGATE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ Factor()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
            }
          }
/*@egen*/          )
|(<SSOpenParen> Expr() <SSCloseParen>) 
|BooleanConst()


  
}

void Statement(): {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
   try {
/*@egen*/
   LOOKAHEAD(3)IncrementStatement()|LOOKAHEAD(3)DecrementStatement()
|LOOKAHEAD(3)Assignment()|LOOKAHEAD(3) Declaration()
|LOOKAHEAD(2)PlusEqualsStatement()|LOOKAHEAD(2)MinusEqualsStatement()|LOOKAHEAD(2)DivideEqualsStatement()|LOOKAHEAD(2)StarEqualsStatement()
|LOOKAHEAD(2)DataStructManipulation()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/



}
void IfPart() : {/*@bgen(jjtree) IfPart */
  ASTIfPart jjtn000 = new ASTIfPart(JJTIFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfPart */
  try {
/*@egen*/
  <RESERVEDWORDIF> <SSOpenParen> (Expr()) <SSCloseParen> <SSOpenBraces> Commands() <SSCloseBraces> (ElseIfPart())* (ElsePart())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}

void ElseIfPart() : {/*@bgen(jjtree) ElseIfPart */
  ASTElseIfPart jjtn000 = new ASTElseIfPart(JJTELSEIFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElseIfPart */
 try {
/*@egen*/
 <RESERVEDWORDELSEIF> <SSOpenParen> (Expr()) <SSCloseParen><SSOpenBraces>  Commands() <SSCloseBraces>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/


}

void ElsePart() : {/*@bgen(jjtree) ElsePart */
  ASTElsePart jjtn000 = new ASTElsePart(JJTELSEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElsePart */
 try {
/*@egen*/
 <RESERVEDWORDELSE> <SSOpenBraces>  Commands() <SSCloseBraces>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void SwitchPart() : {/*@bgen(jjtree) SwitchPart */
  ASTSwitchPart jjtn000 = new ASTSwitchPart(JJTSWITCHPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchPart */
     try {
/*@egen*/
     <RESERVEDWORDSWITCH> <SSOpenParen> (variable())<SSComma>(ComparisonOperator()) <SSCloseParen><SSOpenBraces>  (Cases())+ <SSCloseBraces>/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}
void ComparisonOperator() : {/*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComparisonOperator */
        try {
/*@egen*/
	<SSAnd>|<SSOr>|<SSNot>|<ComparisonEquals>|<SSL>|<SSLE>|<SSG>|<SSGE>|<SSNE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Cases() : {/*@bgen(jjtree) Cases */
  ASTCases jjtn000 = new ASTCases(JJTCASES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Cases */
        try {
/*@egen*/
	<RESERVEDWORDCASE> (Expr()) <SSColon> <SSOpenBraces> (LOOKAHEAD(3)Declaration()|Assignment())* <SSCloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Assignment() : {/*@bgen(jjtree) Assignment */
                     ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) Assignment */
        try {
/*@egen*/
	type = variable() 
	<SSEquals> (Expr()) <SSSemiColon>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setTypeSpec(type);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

TypeSpec variable() : {/*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variable */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        SymTabEntry variableId = symTabStack.lookup(token.image);
	    if(variableId==null)
	    {
	    	System.out.println("VARIABLE LOOKUP ERROR*** -> "+ token.image);
            return null;
	    }
	    else 
	    {
	    	variableId.appendLineNumber(token.beginLine);
	    	TypeSpec type = variableId.getTypeSpec();
	    	jjtn000.setTypeSpec(type);
	    	jjtn000.setAttribute(ID, variableId);
	    	return type;
	    }
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void variableDecl(TypeSpec type) : {/*@bgen(jjtree) variableDecl */
  ASTvariableDecl jjtn000 = new ASTvariableDecl(JJTVARIABLEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variableDecl */
        try {
/*@egen*/
	<IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.VARIABLE);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(type);
            variableId.setTypeSpec(type);
    }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Declaration(): {/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
        try {
/*@egen*/
        (<RESERVEDWORDLOCAL>{
                jjtn000.setAttribute(VALUE, "Local");
        })?
	type=PrimitiveType()
        {
        typeBool=true;
        }
	variableDecl(type) 
   (LOOKAHEAD(2)((<SSEquals> (Expr()) (<SSSemiColon>))) |( (<SSComma> <IDENTIFIER>)*  (<SSSemiColon>))  )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
   	   jjtn000.setTypeSpec(type);
           typeBool= false;
   }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IncrementStatement(): {/*@bgen(jjtree) IncrementStatement */
                            ASTIncrementStatement jjtn000 = new ASTIncrementStatement(JJTINCREMENTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) IncrementStatement */
        try {
/*@egen*/
	type =   variable()<SSplusplus><SSSemiColon>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setTypeSpec(type);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void DecrementStatement(): {/*@bgen(jjtree) DecrementStatement */
                            ASTDecrementStatement jjtn000 = new ASTDecrementStatement(JJTDECREMENTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) DecrementStatement */
        try {
/*@egen*/
	type =   variable()<SSminusminus><SSSemiColon>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		{
			jjtn000.setTypeSpec(type);
		}
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void PlusEqualsStatement(): {/*@bgen(jjtree) PlusEqualsStatement */
                             ASTPlusEqualsStatement jjtn000 = new ASTPlusEqualsStatement(JJTPLUSEQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) PlusEqualsStatement */
        try {
/*@egen*/
	type =    variable() <SSPlusEquals>(variable()|IntegerConst()) <SSSemiColon>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setTypeSpec(type);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MinusEqualsStatement():{/*@bgen(jjtree) MinusEqualsStatement */
                             ASTMinusEqualsStatement jjtn000 = new ASTMinusEqualsStatement(JJTMINUSEQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) MinusEqualsStatement */
        try {
/*@egen*/
	type = variable() <SSMinusEquals> (variable()|IntegerConst())<SSSemiColon>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setTypeSpec(type);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void StarEqualsStatement(): {/*@bgen(jjtree) StarEqualsStatement */
                             ASTStarEqualsStatement jjtn000 = new ASTStarEqualsStatement(JJTSTAREQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) StarEqualsStatement */
        try {
/*@egen*/
	type = variable() <SSMultEquals> (variable()|IntegerConst())<SSSemiColon>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setTypeSpec(type);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void DivideEqualsStatement(): {/*@bgen(jjtree) DivideEqualsStatement */
                               ASTDivideEqualsStatement jjtn000 = new ASTDivideEqualsStatement(JJTDIVIDEEQUALSSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) DivideEqualsStatement */
        try {
/*@egen*/
	type = variable() <SSDivideEquals>(variable()|IntegerConst())<SSSemiColon>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setTypeSpec(type);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void For(): {/*@bgen(jjtree) For */
  ASTFor jjtn000 = new ASTFor(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) For */
        try {
/*@egen*/
	<RESERVEDWORDFOR> <SSOpenParen>(DecVar()) TestCond()<SSSemiColon> IncrementCond()<SSCloseParen><SSOpenBraces> Commands() <SSCloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DecVar():{/*@bgen(jjtree) DecVar */
  ASTDecVar jjtn000 = new ASTDecVar(JJTDECVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DecVar */
        try {
/*@egen*/
	Declaration()|Assignment()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TestCond():{/*@bgen(jjtree) TestCond */
  ASTTestCond jjtn000 = new ASTTestCond(JJTTESTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TestCond */
        try {
/*@egen*/
	Expr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileIncrementCond():{/*@bgen(jjtree) WhileIncrementCond */
  ASTWhileIncrementCond jjtn000 = new ASTWhileIncrementCond(JJTWHILEINCREMENTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileIncrementCond */
        try {
/*@egen*/
	<SSTilda>Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IncrementCond():{/*@bgen(jjtree) IncrementCond */
  ASTIncrementCond jjtn000 = new ASTIncrementCond(JJTINCREMENTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IncrementCond */
        try {
/*@egen*/
	Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void While():{/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	<RESERVEDWORDWHILE> <SSOpenParen> (Expr()) <SSCloseParen><SSOpenBraces> Commands() <SSCloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DataStructManipulation()      : {}
{
 LOOKAHEAD(4)SetAdd()| LOOKAHEAD(4)ListAdd()| LOOKAHEAD(4)MapAdd()|
  LOOKAHEAD(4)SetDelete()| LOOKAHEAD(4)ListDelete()| LOOKAHEAD(4)MapDelete()|
  LOOKAHEAD(4)ListSetVal()| LOOKAHEAD(4)HashSetVal()
}


void getters()      :{}
{
 LOOKAHEAD(4)ListGetVal() | LOOKAHEAD(4)MapGetVal() |
  LOOKAHEAD(4)ListGetIndex()| LOOKAHEAD(4)ListGetSize()
|LOOKAHEAD(4)SetGetSize()|LOOKAHEAD(4)MapGetSize()
|LOOKAHEAD(4)SetGetString()|LOOKAHEAD(4)MapGetString()
|LOOKAHEAD(4) SetContains()
|LOOKAHEAD(4) MapContains()
|LOOKAHEAD(4) StringSubstring()
|LOOKAHEAD(4) StringAppend()
|LOOKAHEAD(4) StringGetIndex()
|LOOKAHEAD(4) StringGetSize()
}


void SetAdd():{/*@bgen(jjtree) SetAdd */
  ASTSetAdd jjtn000 = new ASTSetAdd(JJTSETADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetAdd */
        try {
/*@egen*/
	variable() <SSDot> <DOTADD> <SSOpenParen> (value())  <SSCloseParen> <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListAdd():{/*@bgen(jjtree) ListAdd */
  ASTListAdd jjtn000 = new ASTListAdd(JJTLISTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListAdd */
        try {
/*@egen*/
	variable() <SSDot><DOTADD> <SSOpenBracket> (value()) <SSCloseBracket> <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MapAdd():{/*@bgen(jjtree) MapAdd */
  ASTMapAdd jjtn000 = new ASTMapAdd(JJTMAPADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MapAdd */
        try {
/*@egen*/
	variable() <SSDot><DOTADD> <SSOpenBraces> (value())  (<SSComma>) (value())  <SSCloseBraces> <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Position():{/*@bgen(jjtree) Position */
  ASTPosition jjtn000 = new ASTPosition(JJTPOSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Position */
try {
/*@egen*/
Expr()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void SetDelete():{/*@bgen(jjtree) SetDelete */
  ASTSetDelete jjtn000 = new ASTSetDelete(JJTSETDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetDelete */
        try {
/*@egen*/
	variable() <SSDot><DOTREMOVE> <SSOpenParen>(value())  <SSCloseParen> <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListDelete():{/*@bgen(jjtree) ListDelete */
  ASTListDelete jjtn000 = new ASTListDelete(JJTLISTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListDelete */
        try {
/*@egen*/
	variable() <SSDot><DOTREMOVE> <SSOpenBracket>(value()) <SSCloseBracket> <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MapDelete():{/*@bgen(jjtree) MapDelete */
  ASTMapDelete jjtn000 = new ASTMapDelete(JJTMAPDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MapDelete */
        try {
/*@egen*/
	variable() <SSDot><DOTREMOVE> <SSOpenBraces> (value())  <SSCloseBraces> <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ListGetVal():{/*@bgen(jjtree) ListGetVal */
  ASTListGetVal jjtn000 = new ASTListGetVal(JJTLISTGETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListGetVal */
        try {
/*@egen*/
	variable() <SSDot><DOTGETVAL> <SSOpenBracket> (Position()) <SSCloseBracket>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}
void MapGetVal():{/*@bgen(jjtree) MapGetVal */
  ASTMapGetVal jjtn000 = new ASTMapGetVal(JJTMAPGETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MapGetVal */
        try {
/*@egen*/
	variable() <SSDot><DOTGETVAL> <SSOpenBraces> (Position()) <SSCloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}


void ListGetIndex():{/*@bgen(jjtree) ListGetIndex */
  ASTListGetIndex jjtn000 = new ASTListGetIndex(JJTLISTGETINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListGetIndex */
        try {
/*@egen*/
	variable() <SSDot><DOTGETINDEX> <SSOpenBracket> (value())  <SSCloseBracket>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void StringGetIndex():{/*@bgen(jjtree) StringGetIndex */
  ASTStringGetIndex jjtn000 = new ASTStringGetIndex(JJTSTRINGGETINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringGetIndex */
        try {
/*@egen*/
	variable() <SSDot><DOTGETINDEX> <SSDollar> (value())  <SSDollar>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void StringGetSize():{/*@bgen(jjtree) StringGetSize */
  ASTStringGetSize jjtn000 = new ASTStringGetSize(JJTSTRINGGETSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringGetSize */
        try {
/*@egen*/
	variable() <SSDot><DOTGETSIZE> <SSDollar>  <SSDollar>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void StringSubstring():{/*@bgen(jjtree) StringSubstring */
  ASTStringSubstring jjtn000 = new ASTStringSubstring(JJTSTRINGSUBSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringSubstring */
        try {
/*@egen*/
	variable() <SSDot><DOTSUBSTRING> <SSDollar> (Position()) <SSComma> (value()) <SSDollar>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void StringAppend():{/*@bgen(jjtree) StringAppend */
  ASTStringAppend jjtn000 = new ASTStringAppend(JJTSTRINGAPPEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StringAppend */
        try {
/*@egen*/
	variable() <SSDot><DOTAPPEND> <SSDollar> (value()) <SSDollar>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}


void SetContains():{/*@bgen(jjtree) SetContains */
  ASTSetContains jjtn000 = new ASTSetContains(JJTSETCONTAINS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetContains */
        try {
/*@egen*/
	variable() <SSDot><DOTCONTAINS> <SSOpenParen> (value())  <SSCloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void MapContains():{/*@bgen(jjtree) MapContains */
  ASTMapContains jjtn000 = new ASTMapContains(JJTMAPCONTAINS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MapContains */
        try {
/*@egen*/
	variable() <SSDot><DOTCONTAINS> <SSOpenBraces> (value())  <SSCloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ListGetSize():{/*@bgen(jjtree) ListGetSize */
  ASTListGetSize jjtn000 = new ASTListGetSize(JJTLISTGETSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListGetSize */
        try {
/*@egen*/
	variable() <SSDot><DOTGETSIZE> <SSOpenBracket> <SSCloseBracket>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void SetGetSize():{/*@bgen(jjtree) SetGetSize */
  ASTSetGetSize jjtn000 = new ASTSetGetSize(JJTSETGETSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetGetSize */
        try {
/*@egen*/
	variable() <SSDot><DOTGETSIZE> <SSOpenParen> <SSCloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void MapGetSize():{/*@bgen(jjtree) MapGetSize */
  ASTMapGetSize jjtn000 = new ASTMapGetSize(JJTMAPGETSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MapGetSize */
        try {
/*@egen*/
	variable() <SSDot><DOTGETSIZE> <SSOpenBraces>  <SSCloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void SetGetString():{/*@bgen(jjtree) SetGetString */
  ASTSetGetString jjtn000 = new ASTSetGetString(JJTSETGETSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SetGetString */
        try {
/*@egen*/
	variable() <SSDot><DOTGETSTRING> <SSOpenParen> <SSCloseParen>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void MapGetString():{/*@bgen(jjtree) MapGetString */
  ASTMapGetString jjtn000 = new ASTMapGetString(JJTMAPGETSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MapGetString */
        try {
/*@egen*/
	variable() <SSDot><DOTGETSTRING> <SSOpenBraces>  <SSCloseBraces>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ListSetVal():{/*@bgen(jjtree) ListSetVal */
  ASTListSetVal jjtn000 = new ASTListSetVal(JJTLISTSETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListSetVal */
        try {
/*@egen*/
	variable() <SSDot><DOTSETVAL> <SSOpenBracket> (Position()) <SSComma> (value())  <SSCloseBracket> <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HashSetVal():{/*@bgen(jjtree) HashSetVal */
  ASTHashSetVal jjtn000 = new ASTHashSetVal(JJTHASHSETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HashSetVal */
        try {
/*@egen*/
	variable() <SSDot><DOTSETVAL> <SSOpenBraces> (Position()) <SSComma> (value()) <SSCloseBraces> <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void value():{/*@bgen(jjtree) value */
  ASTvalue jjtn000 = new ASTvalue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) value */
try {
/*@egen*/
Expr()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void KeyType() : {/*@bgen(jjtree) KeyType */
  ASTKeyType jjtn000 = new ASTKeyType(JJTKEYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) KeyType */
        try {
/*@egen*/
	PrimitiveType()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void ValueType() : {/*@bgen(jjtree) ValueType */
  ASTValueType jjtn000 = new ASTValueType(JJTVALUETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValueType */
        try {
/*@egen*/
	PrimitiveType()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
String Size() : {/*@bgen(jjtree) Size */
  ASTSize jjtn000 = new ASTSize(JJTSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Size */
    try {
/*@egen*/
    Expr()/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
    return token.image;
}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DataTypes()       : {}
{
	(Hashmap()| List() | Set())
}


void Hashmap (): {/*@bgen(jjtree) Hashmap */
                  ASTHashmap jjtn000 = new ASTHashmap(JJTHASHMAP);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type1;TypeSpec type2;}
{/*@bgen(jjtree) Hashmap */
        try {
/*@egen*/
	<RESERVEDWORDHASHMAP>
        <SSOpenBraces>
        type1 = PrimitiveType()
        <SSComma> 
        type2 = PrimitiveType()
        <SSCloseBraces>
	<IDENTIFIER> 
	{
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.TYPE);
            
           
            TypeSpecImpl temp =  new TypeSpecImpl(TypeFormImpl.MAP);
            temp.setIdentifier(variableId);
            temp.setAttribute(MAP_KEY_TYPE,type1);
            temp.setAttribute(MAP_VALUE_TYPE,type2);

            variableId.setTypeSpec(temp);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(temp);
            

    }     <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Set (): {/*@bgen(jjtree) Set */
              ASTSet jjtn000 = new ASTSet(JJTSET);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;String count;}
{/*@bgen(jjtree) Set */
         try {
/*@egen*/
         <RESERVEDWORDSET>
	type= PrimitiveType()
        <SSOpenParen> 
        count = Size()
        <SSCloseParen>
	<IDENTIFIER> 
{
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.TYPE);
            

            TypeSpecImpl temp =  new TypeSpecImpl(TypeFormImpl.SET);
            temp.setIdentifier(variableId);
            temp.setAttribute(SET_INDEX_TYPE,type);
            temp.setAttribute(SET_ELEMENT_TYPE,type);
            temp.setAttribute(SET_ELEMENT_COUNT,count);
            
            variableId.setTypeSpec(temp);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(temp);

           
            
    }
   <SSSemiColon>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}
void List (): {/*@bgen(jjtree) List */
               ASTList jjtn000 = new ASTList(JJTLIST);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/TypeSpec type;}
{/*@bgen(jjtree) List */
        try {
/*@egen*/
	<RESERVEDWORDLIST>
        type = PrimitiveType()
	<IDENTIFIER> 
	{
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.TYPE);
            
            TypeSpecImpl temp =  new TypeSpecImpl(TypeFormImpl.LIST);
            temp.setIdentifier(variableId);
            temp.setAttribute(LIST_INDEX_TYPE,type);
            temp.setAttribute(LIST_ELEMENT_TYPE,type);

            variableId.setTypeSpec(temp);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(temp);
            
    }  <SSOpenBracket> <SSCloseBracket>  <SSSemiColon>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// Garbage Code???
JAVACODE
void processVariableDecl(Token token, int index,
                         ArrayList<SymTabEntry> variableList)      
{
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
}
