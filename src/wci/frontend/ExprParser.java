/* Generated By:JJTree&JavaCC: Do not edit this line. ExprParser.java */
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import wci.intermediate.typeimpl.*;
import static wci.intermediate.typeimpl.TypeKeyImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;

public class ExprParser/*@bgen(jjtree)*/implements ExprParserTreeConstants, ExprParserConstants {/*@bgen(jjtree)*/
  protected static JJTExprParserState jjtree = new JJTExprParserState();
    private static final String SOURCE_SUFFIX = ".txt";
    private static final String OUTPUT_SUFFIX = ".j";

    private static TypeSpec type;
    private static boolean typeBool=false;

    private static SymTabStack symTabStack;
    private static SymTabEntry programId;
    private static int index=0;
    private static boolean errorThrown = false;

    public static void main(String[] args)
        throws Exception
    {
        // Create and initialize the symbol table stack.
        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);

 // Parse a program.
        Reader    reader = new FileReader(args[0]);
        ExprParser parser = new ExprParser(reader);
        SimpleNode rootNode= parser.Program();


        // Print the cross-reference table.
       // CrossReferencer crossReferencer = new CrossReferencer();
        //crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        ExprParserVisitorAdapter typeVisitor = new ExprParserVisitorAdapter();
        rootNode.jjtAccept(typeVisitor, rootNode);

        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);

        // Print the parse tree.
        //ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        //treePrinter.print(symTabStack);

        // Process the source file path which ends in .pcl
        // and create the output file path which ends in .j
        String sourceFilePath = args[0];
        int truncatedLength = sourceFilePath.length() - SOURCE_SUFFIX.length();
        int suffixIndex = sourceFilePath.lastIndexOf(SOURCE_SUFFIX);
        String objectFilePath = (suffixIndex == truncatedLength)
            ?  "OutputFiles/" +sourceFilePath.substring(0, truncatedLength) +OUTPUT_SUFFIX
            : "OutputFiles/" + sourceFilePath + OUTPUT_SUFFIX;
        if(errorThrown==false){
            // Create the compiler backend and generate code.
            Backend backend = BackendFactory.createBackend("compile");
            backend.process(iCode, symTabStack, objectFilePath);
            System.out.println("Parsing has ended and .j file has been generated!");
        }else{// Print error
            System.out.println("Error(s) have been thrown, please fix and recompile");
        }
        }

  static String handleError(Token token) throws ParseException {
 /*@bgen(jjtree) handleError */
 ASThandleError jjtn000 = new ASThandleError(JJTHANDLEERROR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {System.out.println("*** ERROR: Line " + token.beginLine +
                       " after \u005c"" + token.image + "\u005c"");

    Token t;


        t = getNextToken();

    errorThrown = true;// throw error so we do not compile backend
    return t.image;/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  static final public void Error() throws ParseException {
                /*@bgen(jjtree) Error */
  ASTError jjtn000 = new ASTError(JJTERROR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ERROR);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public SimpleNode Program() throws ParseException {
                        /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(IDENTIFIER);
        programId = symTabStack.enterLocal(token.image);
        programId.setDefinition(DefinitionImpl.PROGRAM);
        programId.setAttribute(ROUTINE_SYMTAB, symTabStack.push());
        symTabStack.setProgramId(programId);
//  deprecated      index=0;// Every procedure has new indx at 0

        jj_consume_token(SSOpenBraces);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESERVEDWORDPROCEDURE:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Procedure();
        }
        jj_consume_token(SSCloseBraces);
      } catch (ParseException ex) {
handleError(ex.currentToken);
System.out.println("Main Program Structure thrown!");
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
{if (true) return jjtn000;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ProcedureCall() throws ParseException {
                       /*@bgen(jjtree) ProcedureCall */
  ASTProcedureCall jjtn000 = new ASTProcedureCall(JJTPROCEDURECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDCALL);
      jj_consume_token(IDENTIFIER);
jjtn000.setAttribute(VALUE,token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSOpenParen:
        ValuePass();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Procedure() throws ParseException {
                    /*@bgen(jjtree) Procedure */
  ASTProcedure jjtn000 = new ASTProcedure(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDPROCEDURE);
      jj_consume_token(IDENTIFIER);
jjtn000.setAttribute(VALUE, token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSFunc:
        Parameters();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(SSOpenBraces);
      Commands();
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void Parameters() throws ParseException {
                   /*@bgen(jjtree) Parameters */
                   ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      jj_consume_token(SSFunc);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        type = PrimitiveType();
        variableDecl(type);
      }
      jj_consume_token(SSFunc);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void ValuePass() throws ParseException {
                  /*@bgen(jjtree) ValuePass */
                  ASTValuePass jjtn000 = new ASTValuePass(JJTVALUEPASS);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      jj_consume_token(SSOpenParen);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        type = PrimitiveType();
        variable();
      }
      jj_consume_token(SSCloseParen);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void Commands() throws ParseException {
                   /*@bgen(jjtree) Commands */
  ASTCommands jjtn000 = new ASTCommands(JJTCOMMANDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESERVEDWORDLOCAL:
          case RESERVEDWORDPRINT:
          case RESERVEDWORDCALL:
          case RESERVEDWORDIF:
          case RESERVEDWORDSWITCH:
          case RESERVEDWORDWHILE:
          case RESERVEDWORDFOR:
          case RESERVEDWORDINT:
          case RESERVEDWORDFLOAT:
          case RESERVEDWORDBOOLEAN:
          case RESERVEDWORDDOUBLE:
          case RESERVEDWORDSTRING:
          case RESERVEDWORDHASHMAP:
          case RESERVEDWORDSET:
          case RESERVEDWORDLIST:
          case IDENTIFIER:
          case ERROR:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESERVEDWORDIF:
            IfPart();
            break;
          case RESERVEDWORDSWITCH:
            SwitchPart();
            break;
          case RESERVEDWORDFOR:
            For();
            break;
          case RESERVEDWORDWHILE:
            While();
            break;
          case RESERVEDWORDLOCAL:
          case RESERVEDWORDINT:
          case RESERVEDWORDFLOAT:
          case RESERVEDWORDBOOLEAN:
          case RESERVEDWORDDOUBLE:
          case RESERVEDWORDSTRING:
          case IDENTIFIER:
            Statement();
            break;
          case RESERVEDWORDCALL:
            ProcedureCall();
            break;
          case RESERVEDWORDHASHMAP:
          case RESERVEDWORDSET:
          case RESERVEDWORDLIST:
            DataTypes();
            break;
          case RESERVEDWORDPRINT:
            PrintStatement();
            break;
          case ERROR:
            Error();
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException ex) {
        handleError(ex.currentToken);
        Commands();// Recursive call to continue error handling

      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PrintStatement() throws ParseException {
                         /*@bgen(jjtree) PrintStatement */
  ASTPrintStatement jjtn000 = new ASTPrintStatement(JJTPRINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDPRINT);
      Expr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SSComma:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        jj_consume_token(SSComma);
        Expr();
      }
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void Literal() throws ParseException {
                  /*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        StringConst();
        break;
      case RESERVEDWORDREADINT:
      case INTEGER:
        IntegerConst();
        break;
      case REALNUMBER:
      case REAL_NUMBER:
        FloatConst();
        break;
      case BOOLEAN:
        BooleanConst();
        break;
      case DOUBLE:
        DoubleConst();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public TypeSpec PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVEDWORDINT:
      jj_consume_token(RESERVEDWORDINT);
                     {if (true) return Predefined.integerType;}
      break;
    case RESERVEDWORDSTRING:
      jj_consume_token(RESERVEDWORDSTRING);
                        {if (true) return Predefined.stringType;}
      break;
    case RESERVEDWORDDOUBLE:
      jj_consume_token(RESERVEDWORDDOUBLE);
                        {if (true) return Predefined.doubleType;}
      break;
    case RESERVEDWORDFLOAT:
      jj_consume_token(RESERVEDWORDFLOAT);
                       {if (true) return Predefined.floatType;}
      break;
    case RESERVEDWORDBOOLEAN:
      jj_consume_token(RESERVEDWORDBOOLEAN);
                         {if (true) return Predefined.booleanType;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void IntegerConst() throws ParseException {
                       /*@bgen(jjtree) IntegerConst */
  ASTIntegerConst jjtn000 = new ASTIntegerConst(JJTINTEGERCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        jj_consume_token(INTEGER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
        if(Predefined.integerType!=type && typeBool){
            System.out.println("Type Check Error This is not a Integer Line "+ token.beginLine);
        }
        typeBool=false;
        break;
      case RESERVEDWORDREADINT:
        jj_consume_token(RESERVEDWORDREADINT);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
        jjtn000.setAttribute(VALUE, "Input");
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BooleanConst() throws ParseException {
                       /*@bgen(jjtree) BooleanConst */
  ASTBooleanConst jjtn000 = new ASTBooleanConst(JJTBOOLEANCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLEAN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        if(Predefined.booleanType!=type && typeBool){
            System.out.println("Type Check Error This is not a Boolean Line "+ token.beginLine);
        }
        typeBool=false;
        jjtn000.setTypeSpec(Predefined.booleanType);
        jjtn000.setAttribute(VALUE, Boolean.valueOf(token.image));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FloatConst() throws ParseException {
                     /*@bgen(jjtree) FloatConst */
  ASTFloatConst jjtn000 = new ASTFloatConst(JJTFLOATCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REALNUMBER:
        jj_consume_token(REALNUMBER);
        break;
      case REAL_NUMBER:
        jj_consume_token(REAL_NUMBER);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if(Predefined.realType!=type && typeBool){
            System.out.println("Type Check Error This is not a Float Line "+ token.beginLine);
        }
        typeBool=false;
        jjtn000.setTypeSpec(Predefined.floatType);
        jjtn000.setAttribute(VALUE, Float.parseFloat(token.image));
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void DoubleConst() throws ParseException {
                      /*@bgen(jjtree) DoubleConst */
  ASTDoubleConst jjtn000 = new ASTDoubleConst(JJTDOUBLECONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOUBLE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if(Predefined.doubleType!=type && typeBool){
            System.out.println("Type Check Error This is not a Double Line "+ token.beginLine);
        }
        typeBool=false;
        jjtn000.setTypeSpec(Predefined.doubleType);
        jjtn000.setAttribute(VALUE, Double.parseDouble(token.image));
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void StringConst() throws ParseException {
                      /*@bgen(jjtree) StringConst */
  ASTStringConst jjtn000 = new ASTStringConst(JJTSTRINGCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        if(Predefined.stringType!=type && typeBool){
            System.out.println("Type Check Error This is not a String Line "+token.beginLine);
        }
        typeBool=false;
        jjtn000.setTypeSpec(Predefined.stringType);
        jjtn000.setAttribute(VALUE, token.image.substring(1,token.image.length()-1));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr() throws ParseException {
    SimpleExpr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSL:
      case SSLE:
      case SSG:
      case SSGE:
      case SSNE:
      case ComparisonEquals:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSNE:
        jj_consume_token(SSNE);
                           ASTNotEquals jjtn001 = new ASTNotEquals(JJTNOTEQUALS);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
        try {
          SimpleExpr();
        } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
        } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  2);
                           }
        }
        break;
      case SSL:
        jj_consume_token(SSL);
                                                            ASTLessThan jjtn002 = new ASTLessThan(JJTLESSTHAN);
                                                            boolean jjtc002 = true;
                                                            jjtree.openNodeScope(jjtn002);
        try {
          SimpleExpr();
        } catch (Throwable jjte002) {
                                                            if (jjtc002) {
                                                              jjtree.clearNodeScope(jjtn002);
                                                              jjtc002 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte002 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte002;}
                                                            }
                                                            if (jjte002 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte002;}
                                                            }
                                                            {if (true) throw (Error)jjte002;}
        } finally {
                                                            if (jjtc002) {
                                                              jjtree.closeNodeScope(jjtn002,  2);
                                                            }
        }
        break;
      case SSLE:
        jj_consume_token(SSLE);
                                                                                             ASTLessEquals jjtn003 = new ASTLessEquals(JJTLESSEQUALS);
                                                                                             boolean jjtc003 = true;
                                                                                             jjtree.openNodeScope(jjtn003);
        try {
          SimpleExpr();
        } catch (Throwable jjte003) {
                                                                                             if (jjtc003) {
                                                                                               jjtree.clearNodeScope(jjtn003);
                                                                                               jjtc003 = false;
                                                                                             } else {
                                                                                               jjtree.popNode();
                                                                                             }
                                                                                             if (jjte003 instanceof RuntimeException) {
                                                                                               {if (true) throw (RuntimeException)jjte003;}
                                                                                             }
                                                                                             if (jjte003 instanceof ParseException) {
                                                                                               {if (true) throw (ParseException)jjte003;}
                                                                                             }
                                                                                             {if (true) throw (Error)jjte003;}
        } finally {
                                                                                             if (jjtc003) {
                                                                                               jjtree.closeNodeScope(jjtn003,  2);
                                                                                             }
        }
        break;
      case SSG:
        jj_consume_token(SSG);
                                                                                                                               ASTGreaterThan jjtn004 = new ASTGreaterThan(JJTGREATERTHAN);
                                                                                                                               boolean jjtc004 = true;
                                                                                                                               jjtree.openNodeScope(jjtn004);
        try {
          SimpleExpr();
        } catch (Throwable jjte004) {
                                                                                                                               if (jjtc004) {
                                                                                                                                 jjtree.clearNodeScope(jjtn004);
                                                                                                                                 jjtc004 = false;
                                                                                                                               } else {
                                                                                                                                 jjtree.popNode();
                                                                                                                               }
                                                                                                                               if (jjte004 instanceof RuntimeException) {
                                                                                                                                 {if (true) throw (RuntimeException)jjte004;}
                                                                                                                               }
                                                                                                                               if (jjte004 instanceof ParseException) {
                                                                                                                                 {if (true) throw (ParseException)jjte004;}
                                                                                                                               }
                                                                                                                               {if (true) throw (Error)jjte004;}
        } finally {
                                                                                                                               if (jjtc004) {
                                                                                                                                 jjtree.closeNodeScope(jjtn004,  2);
                                                                                                                               }
        }
        break;
      case SSGE:
        jj_consume_token(SSGE);
                                                                                                                                                                  ASTGreaterEquals jjtn005 = new ASTGreaterEquals(JJTGREATEREQUALS);
                                                                                                                                                                  boolean jjtc005 = true;
                                                                                                                                                                  jjtree.openNodeScope(jjtn005);
        try {
          SimpleExpr();
        } catch (Throwable jjte005) {
                                                                                                                                                                  if (jjtc005) {
                                                                                                                                                                    jjtree.clearNodeScope(jjtn005);
                                                                                                                                                                    jjtc005 = false;
                                                                                                                                                                  } else {
                                                                                                                                                                    jjtree.popNode();
                                                                                                                                                                  }
                                                                                                                                                                  if (jjte005 instanceof RuntimeException) {
                                                                                                                                                                    {if (true) throw (RuntimeException)jjte005;}
                                                                                                                                                                  }
                                                                                                                                                                  if (jjte005 instanceof ParseException) {
                                                                                                                                                                    {if (true) throw (ParseException)jjte005;}
                                                                                                                                                                  }
                                                                                                                                                                  {if (true) throw (Error)jjte005;}
        } finally {
                                                                                                                                                                  if (jjtc005) {
                                                                                                                                                                    jjtree.closeNodeScope(jjtn005,  2);
                                                                                                                                                                  }
        }
        break;
      case ComparisonEquals:
        jj_consume_token(ComparisonEquals);
                                                                                                                                                                                                                  ASTEquals jjtn006 = new ASTEquals(JJTEQUALS);
                                                                                                                                                                                                                  boolean jjtc006 = true;
                                                                                                                                                                                                                  jjtree.openNodeScope(jjtn006);
        try {
          SimpleExpr();
        } catch (Throwable jjte006) {
                                                                                                                                                                                                                  if (jjtc006) {
                                                                                                                                                                                                                    jjtree.clearNodeScope(jjtn006);
                                                                                                                                                                                                                    jjtc006 = false;
                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                    jjtree.popNode();
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (jjte006 instanceof RuntimeException) {
                                                                                                                                                                                                                    {if (true) throw (RuntimeException)jjte006;}
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (jjte006 instanceof ParseException) {
                                                                                                                                                                                                                    {if (true) throw (ParseException)jjte006;}
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  {if (true) throw (Error)jjte006;}
        } finally {
                                                                                                                                                                                                                  if (jjtc006) {
                                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn006,  2);
                                                                                                                                                                                                                  }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void SimpleExpr() throws ParseException {
    Term();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSOr:
      case SSPlus:
      case SSMinus:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSPlus:
        jj_consume_token(SSPlus);
                     ASTadd jjtn001 = new ASTadd(JJTADD);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
          Term();
        } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
        }
        break;
      case SSMinus:
        jj_consume_token(SSMinus);
                                               ASTsubtract jjtn002 = new ASTsubtract(JJTSUBTRACT);
                                               boolean jjtc002 = true;
                                               jjtree.openNodeScope(jjtn002);
        try {
          Term();
        } catch (Throwable jjte002) {
                                               if (jjtc002) {
                                                 jjtree.clearNodeScope(jjtn002);
                                                 jjtc002 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte002 instanceof RuntimeException) {
                                                 {if (true) throw (RuntimeException)jjte002;}
                                               }
                                               if (jjte002 instanceof ParseException) {
                                                 {if (true) throw (ParseException)jjte002;}
                                               }
                                               {if (true) throw (Error)jjte002;}
        } finally {
                                               if (jjtc002) {
                                                 jjtree.closeNodeScope(jjtn002,  2);
                                               }
        }
        break;
      case SSOr:
        jj_consume_token(SSOr);
                                                                           ASTor jjtn003 = new ASTor(JJTOR);
                                                                           boolean jjtc003 = true;
                                                                           jjtree.openNodeScope(jjtn003);
        try {
          Term();
        } catch (Throwable jjte003) {
                                                                           if (jjtc003) {
                                                                             jjtree.clearNodeScope(jjtn003);
                                                                             jjtc003 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte003 instanceof RuntimeException) {
                                                                             {if (true) throw (RuntimeException)jjte003;}
                                                                           }
                                                                           if (jjte003 instanceof ParseException) {
                                                                             {if (true) throw (ParseException)jjte003;}
                                                                           }
                                                                           {if (true) throw (Error)jjte003;}
        } finally {
                                                                           if (jjtc003) {
                                                                             jjtree.closeNodeScope(jjtn003,  2);
                                                                           }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Term() throws ParseException {
    Factor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSAnd:
      case SSStar:
      case SSDivide:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSStar:
        jj_consume_token(SSStar);
                        ASTmultiply jjtn001 = new ASTmultiply(JJTMULTIPLY);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
        try {
          Factor();
        } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
        } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
        }
        break;
      case SSDivide:
        jj_consume_token(SSDivide);
                                                         ASTdivide jjtn002 = new ASTdivide(JJTDIVIDE);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
        try {
          Factor();
        } catch (Throwable jjte002) {
                                                         if (jjtc002) {
                                                           jjtree.clearNodeScope(jjtn002);
                                                           jjtc002 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte002 instanceof RuntimeException) {
                                                           {if (true) throw (RuntimeException)jjte002;}
                                                         }
                                                         if (jjte002 instanceof ParseException) {
                                                           {if (true) throw (ParseException)jjte002;}
                                                         }
                                                         {if (true) throw (Error)jjte002;}
        } finally {
                                                         if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                         }
        }
        break;
      case SSAnd:
        jj_consume_token(SSAnd);
                                                                                     ASTand jjtn003 = new ASTand(JJTAND);
                                                                                     boolean jjtc003 = true;
                                                                                     jjtree.openNodeScope(jjtn003);
        try {
          Factor();
        } catch (Throwable jjte003) {
                                                                                     if (jjtc003) {
                                                                                       jjtree.clearNodeScope(jjtn003);
                                                                                       jjtc003 = false;
                                                                                     } else {
                                                                                       jjtree.popNode();
                                                                                     }
                                                                                     if (jjte003 instanceof RuntimeException) {
                                                                                       {if (true) throw (RuntimeException)jjte003;}
                                                                                     }
                                                                                     if (jjte003 instanceof ParseException) {
                                                                                       {if (true) throw (ParseException)jjte003;}
                                                                                     }
                                                                                     {if (true) throw (Error)jjte003;}
        } finally {
                                                                                     if (jjtc003) {
                                                                                       jjtree.closeNodeScope(jjtn003,  2);
                                                                                     }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Factor() throws ParseException {
    if (jj_2_1(3)) {
      getters();
    } else if (jj_2_2(3)) {
      variable();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVEDWORDREADINT:
      case STRING:
      case INTEGER:
      case DOUBLE:
      case REALNUMBER:
      case REAL_NUMBER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVEDWORDREADINT:
        case INTEGER:
          IntegerConst();
          break;
        case REALNUMBER:
        case REAL_NUMBER:
          FloatConst();
          break;
        case STRING:
          StringConst();
          break;
        case DOUBLE:
          DoubleConst();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case SSNot:
        jj_consume_token(SSNot);
            ASTNegate jjtn001 = new ASTNegate(JJTNEGATE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
        try {
          Factor();
        } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
        } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
            }
        }
        break;
      case SSOpenParen:
        jj_consume_token(SSOpenParen);
        Expr();
        jj_consume_token(SSCloseParen);
        break;
      case BOOLEAN:
        BooleanConst();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Statement() throws ParseException {
                   /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(3)) {
        IncrementStatement();
      } else if (jj_2_4(3)) {
        DecrementStatement();
      } else if (jj_2_5(3)) {
        Assignment();
      } else if (jj_2_6(3)) {
        Declaration();
      } else if (jj_2_7(2)) {
        PlusEqualsStatement();
      } else if (jj_2_8(2)) {
        MinusEqualsStatement();
      } else if (jj_2_9(2)) {
        DivideEqualsStatement();
      } else if (jj_2_10(2)) {
        StarEqualsStatement();
      } else if (jj_2_11(2)) {
        DataStructManipulation();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void IfPart() throws ParseException {
                 /*@bgen(jjtree) IfPart */
  ASTIfPart jjtn000 = new ASTIfPart(JJTIFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDIF);
      jj_consume_token(SSOpenParen);
      Expr();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      Commands();
      jj_consume_token(SSCloseBraces);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVEDWORDELSEIF:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        ElseIfPart();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVEDWORDELSE:
        ElsePart();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ElseIfPart() throws ParseException {
                     /*@bgen(jjtree) ElseIfPart */
  ASTElseIfPart jjtn000 = new ASTElseIfPart(JJTELSEIFPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDELSEIF);
      jj_consume_token(SSOpenParen);
      Expr();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      Commands();
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void ElsePart() throws ParseException {
                   /*@bgen(jjtree) ElsePart */
  ASTElsePart jjtn000 = new ASTElsePart(JJTELSEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDELSE);
      jj_consume_token(SSOpenBraces);
      Commands();
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void SwitchPart() throws ParseException {
                     /*@bgen(jjtree) SwitchPart */
  ASTSwitchPart jjtn000 = new ASTSwitchPart(JJTSWITCHPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDSWITCH);
      jj_consume_token(SSOpenParen);
      variable();
      jj_consume_token(SSComma);
      ComparisonOperator();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      label_10:
      while (true) {
        Cases();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVEDWORDCASE:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static final public void ComparisonOperator() throws ParseException {
                             /*@bgen(jjtree) ComparisonOperator */
  ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SSAnd:
        jj_consume_token(SSAnd);
        break;
      case SSOr:
        jj_consume_token(SSOr);
        break;
      case SSNot:
        jj_consume_token(SSNot);
        break;
      case ComparisonEquals:
        jj_consume_token(ComparisonEquals);
        break;
      case SSL:
        jj_consume_token(SSL);
        break;
      case SSLE:
        jj_consume_token(SSLE);
        break;
      case SSG:
        jj_consume_token(SSG);
        break;
      case SSGE:
        jj_consume_token(SSGE);
        break;
      case SSNE:
        jj_consume_token(SSNE);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Cases() throws ParseException {
                /*@bgen(jjtree) Cases */
  ASTCases jjtn000 = new ASTCases(JJTCASES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDCASE);
      Expr();
      jj_consume_token(SSColon);
      jj_consume_token(SSOpenBraces);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESERVEDWORDLOCAL:
        case RESERVEDWORDINT:
        case RESERVEDWORDFLOAT:
        case RESERVEDWORDBOOLEAN:
        case RESERVEDWORDDOUBLE:
        case RESERVEDWORDSTRING:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
        if (jj_2_12(3)) {
          Declaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            Assignment();
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Assignment() throws ParseException {
                     /*@bgen(jjtree) Assignment */
                     ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSEquals);
      Expr();
      jj_consume_token(SSSemiColon);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public TypeSpec variable() throws ParseException {
                       /*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        SymTabEntry variableId = symTabStack.lookup(token.image);
            if(variableId==null)
            {
                System.out.println("VARIABLE LOOKUP ERROR*** -> "+ token.image);
            {if (true) return null;}
            }
            else
            {
                variableId.appendLineNumber(token.beginLine);
                TypeSpec type = variableId.getTypeSpec();
                jjtn000.setTypeSpec(type);
                jjtn000.setAttribute(ID, variableId);
                {if (true) return type;}
            }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void variableDecl(TypeSpec type) throws ParseException {
                                    /*@bgen(jjtree) variableDecl */
  ASTvariableDecl jjtn000 = new ASTvariableDecl(JJTVARIABLEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.VARIABLE);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(type);
            variableId.setTypeSpec(type);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Declaration() throws ParseException {
                     /*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVEDWORDLOCAL:
        jj_consume_token(RESERVEDWORDLOCAL);
                jjtn000.setAttribute(VALUE, "Local");
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      type = PrimitiveType();
        typeBool=true;
      variableDecl(type);
      if (jj_2_13(2)) {
        jj_consume_token(SSEquals);
        Expr();
        jj_consume_token(SSSemiColon);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SSSemiColon:
        case SSComma:
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SSComma:
              ;
              break;
            default:
              jj_la1[27] = jj_gen;
              break label_12;
            }
            jj_consume_token(SSComma);
            jj_consume_token(IDENTIFIER);
          }
          jj_consume_token(SSSemiColon);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
           jjtn000.setTypeSpec(type);
           typeBool= false;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IncrementStatement() throws ParseException {
                            /*@bgen(jjtree) IncrementStatement */
                            ASTIncrementStatement jjtn000 = new ASTIncrementStatement(JJTINCREMENTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSplusplus);
      jj_consume_token(SSSemiColon);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DecrementStatement() throws ParseException {
                            /*@bgen(jjtree) DecrementStatement */
                            ASTDecrementStatement jjtn000 = new ASTDecrementStatement(JJTDECREMENTSTATEMENT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSminusminus);
      jj_consume_token(SSSemiColon);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {
                        jjtn000.setTypeSpec(type);
                }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PlusEqualsStatement() throws ParseException {
                             /*@bgen(jjtree) PlusEqualsStatement */
                             ASTPlusEqualsStatement jjtn000 = new ASTPlusEqualsStatement(JJTPLUSEQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSPlusEquals);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        variable();
        break;
      case RESERVEDWORDREADINT:
      case INTEGER:
        IntegerConst();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MinusEqualsStatement() throws ParseException {
                             /*@bgen(jjtree) MinusEqualsStatement */
                             ASTMinusEqualsStatement jjtn000 = new ASTMinusEqualsStatement(JJTMINUSEQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSMinusEquals);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        variable();
        break;
      case RESERVEDWORDREADINT:
      case INTEGER:
        IntegerConst();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StarEqualsStatement() throws ParseException {
                             /*@bgen(jjtree) StarEqualsStatement */
                             ASTStarEqualsStatement jjtn000 = new ASTStarEqualsStatement(JJTSTAREQUALSSTATEMENT);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSMultEquals);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        variable();
        break;
      case RESERVEDWORDREADINT:
      case INTEGER:
        IntegerConst();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DivideEqualsStatement() throws ParseException {
                               /*@bgen(jjtree) DivideEqualsStatement */
                               ASTDivideEqualsStatement jjtn000 = new ASTDivideEqualsStatement(JJTDIVIDEEQUALSSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      type = variable();
      jj_consume_token(SSDivideEquals);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        variable();
        break;
      case RESERVEDWORDREADINT:
      case INTEGER:
        IntegerConst();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SSSemiColon);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setTypeSpec(type);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void For() throws ParseException {
             /*@bgen(jjtree) For */
  ASTFor jjtn000 = new ASTFor(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDFOR);
      jj_consume_token(SSOpenParen);
      DecVar();
      TestCond();
      jj_consume_token(SSSemiColon);
      IncrementCond();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      Commands();
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DecVar() throws ParseException {
               /*@bgen(jjtree) DecVar */
  ASTDecVar jjtn000 = new ASTDecVar(JJTDECVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESERVEDWORDLOCAL:
      case RESERVEDWORDINT:
      case RESERVEDWORDFLOAT:
      case RESERVEDWORDBOOLEAN:
      case RESERVEDWORDDOUBLE:
      case RESERVEDWORDSTRING:
        Declaration();
        break;
      case IDENTIFIER:
        Assignment();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TestCond() throws ParseException {
                 /*@bgen(jjtree) TestCond */
  ASTTestCond jjtn000 = new ASTTestCond(JJTTESTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WhileIncrementCond() throws ParseException {
                           /*@bgen(jjtree) WhileIncrementCond */
  ASTWhileIncrementCond jjtn000 = new ASTWhileIncrementCond(JJTWHILEINCREMENTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SSTilda);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IncrementCond() throws ParseException {
                      /*@bgen(jjtree) IncrementCond */
  ASTIncrementCond jjtn000 = new ASTIncrementCond(JJTINCREMENTCOND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void While() throws ParseException {
              /*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RESERVEDWORDWHILE);
      jj_consume_token(SSOpenParen);
      Expr();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSOpenBraces);
      Commands();
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DataStructManipulation() throws ParseException {
    if (jj_2_14(4)) {
      SetAdd();
    } else if (jj_2_15(4)) {
      ListAdd();
    } else if (jj_2_16(4)) {
      MapAdd();
    } else if (jj_2_17(4)) {
      SetDelete();
    } else if (jj_2_18(4)) {
      ListDelete();
    } else if (jj_2_19(4)) {
      MapDelete();
    } else if (jj_2_20(4)) {
      ListSetVal();
    } else if (jj_2_21(4)) {
      HashSetVal();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void getters() throws ParseException {
    if (jj_2_22(4)) {
      ListGetVal();
    } else if (jj_2_23(4)) {
      MapGetVal();
    } else if (jj_2_24(4)) {
      ListGetIndex();
    } else if (jj_2_25(4)) {
      ListGetSize();
    } else if (jj_2_26(4)) {
      SetGetSize();
    } else if (jj_2_27(4)) {
      MapGetSize();
    } else if (jj_2_28(4)) {
      SetGetString();
    } else if (jj_2_29(4)) {
      MapGetString();
    } else if (jj_2_30(4)) {
      SetContains();
    } else if (jj_2_31(4)) {
      MapContains();
    } else if (jj_2_32(4)) {
      StringSubstring();
    } else if (jj_2_33(4)) {
      StringAppend();
    } else if (jj_2_34(4)) {
      StringGetIndex();
    } else if (jj_2_35(4)) {
      StringGetSize();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SetAdd() throws ParseException {
               /*@bgen(jjtree) SetAdd */
  ASTSetAdd jjtn000 = new ASTSetAdd(JJTSETADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTADD);
      jj_consume_token(SSOpenParen);
      value();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ListAdd() throws ParseException {
                /*@bgen(jjtree) ListAdd */
  ASTListAdd jjtn000 = new ASTListAdd(JJTLISTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTADD);
      jj_consume_token(SSOpenBracket);
      value();
      jj_consume_token(SSCloseBracket);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MapAdd() throws ParseException {
               /*@bgen(jjtree) MapAdd */
  ASTMapAdd jjtn000 = new ASTMapAdd(JJTMAPADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTADD);
      jj_consume_token(SSOpenBraces);
      value();
      jj_consume_token(SSComma);
      value();
      jj_consume_token(SSCloseBraces);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Position() throws ParseException {
                 /*@bgen(jjtree) Position */
  ASTPosition jjtn000 = new ASTPosition(JJTPOSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void SetDelete() throws ParseException {
                  /*@bgen(jjtree) SetDelete */
  ASTSetDelete jjtn000 = new ASTSetDelete(JJTSETDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTREMOVE);
      jj_consume_token(SSOpenParen);
      value();
      jj_consume_token(SSCloseParen);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ListDelete() throws ParseException {
                   /*@bgen(jjtree) ListDelete */
  ASTListDelete jjtn000 = new ASTListDelete(JJTLISTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTREMOVE);
      jj_consume_token(SSOpenBracket);
      value();
      jj_consume_token(SSCloseBracket);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MapDelete() throws ParseException {
                  /*@bgen(jjtree) MapDelete */
  ASTMapDelete jjtn000 = new ASTMapDelete(JJTMAPDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTREMOVE);
      jj_consume_token(SSOpenBraces);
      value();
      jj_consume_token(SSCloseBraces);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ListGetVal() throws ParseException {
                   /*@bgen(jjtree) ListGetVal */
  ASTListGetVal jjtn000 = new ASTListGetVal(JJTLISTGETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETVAL);
      jj_consume_token(SSOpenBracket);
      Position();
      jj_consume_token(SSCloseBracket);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MapGetVal() throws ParseException {
                  /*@bgen(jjtree) MapGetVal */
  ASTMapGetVal jjtn000 = new ASTMapGetVal(JJTMAPGETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETVAL);
      jj_consume_token(SSOpenBraces);
      Position();
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ListGetIndex() throws ParseException {
                     /*@bgen(jjtree) ListGetIndex */
  ASTListGetIndex jjtn000 = new ASTListGetIndex(JJTLISTGETINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETINDEX);
      jj_consume_token(SSOpenBracket);
      value();
      jj_consume_token(SSCloseBracket);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StringGetIndex() throws ParseException {
                       /*@bgen(jjtree) StringGetIndex */
  ASTStringGetIndex jjtn000 = new ASTStringGetIndex(JJTSTRINGGETINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETINDEX);
      jj_consume_token(SSDollar);
      value();
      jj_consume_token(SSDollar);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StringGetSize() throws ParseException {
                      /*@bgen(jjtree) StringGetSize */
  ASTStringGetSize jjtn000 = new ASTStringGetSize(JJTSTRINGGETSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETSIZE);
      jj_consume_token(SSDollar);
      jj_consume_token(SSDollar);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StringSubstring() throws ParseException {
                        /*@bgen(jjtree) StringSubstring */
  ASTStringSubstring jjtn000 = new ASTStringSubstring(JJTSTRINGSUBSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTSUBSTRING);
      jj_consume_token(SSDollar);
      Position();
      jj_consume_token(SSComma);
      value();
      jj_consume_token(SSDollar);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void StringAppend() throws ParseException {
                     /*@bgen(jjtree) StringAppend */
  ASTStringAppend jjtn000 = new ASTStringAppend(JJTSTRINGAPPEND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTAPPEND);
      jj_consume_token(SSDollar);
      value();
      jj_consume_token(SSDollar);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SetContains() throws ParseException {
                    /*@bgen(jjtree) SetContains */
  ASTSetContains jjtn000 = new ASTSetContains(JJTSETCONTAINS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTCONTAINS);
      jj_consume_token(SSOpenParen);
      value();
      jj_consume_token(SSCloseParen);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MapContains() throws ParseException {
                    /*@bgen(jjtree) MapContains */
  ASTMapContains jjtn000 = new ASTMapContains(JJTMAPCONTAINS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTCONTAINS);
      jj_consume_token(SSOpenBraces);
      value();
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ListGetSize() throws ParseException {
                    /*@bgen(jjtree) ListGetSize */
  ASTListGetSize jjtn000 = new ASTListGetSize(JJTLISTGETSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETSIZE);
      jj_consume_token(SSOpenBracket);
      jj_consume_token(SSCloseBracket);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SetGetSize() throws ParseException {
                   /*@bgen(jjtree) SetGetSize */
  ASTSetGetSize jjtn000 = new ASTSetGetSize(JJTSETGETSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETSIZE);
      jj_consume_token(SSOpenParen);
      jj_consume_token(SSCloseParen);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MapGetSize() throws ParseException {
                   /*@bgen(jjtree) MapGetSize */
  ASTMapGetSize jjtn000 = new ASTMapGetSize(JJTMAPGETSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETSIZE);
      jj_consume_token(SSOpenBraces);
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SetGetString() throws ParseException {
                     /*@bgen(jjtree) SetGetString */
  ASTSetGetString jjtn000 = new ASTSetGetString(JJTSETGETSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETSTRING);
      jj_consume_token(SSOpenParen);
      jj_consume_token(SSCloseParen);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MapGetString() throws ParseException {
                     /*@bgen(jjtree) MapGetString */
  ASTMapGetString jjtn000 = new ASTMapGetString(JJTMAPGETSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTGETSTRING);
      jj_consume_token(SSOpenBraces);
      jj_consume_token(SSCloseBraces);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ListSetVal() throws ParseException {
                   /*@bgen(jjtree) ListSetVal */
  ASTListSetVal jjtn000 = new ASTListSetVal(JJTLISTSETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTSETVAL);
      jj_consume_token(SSOpenBracket);
      Position();
      jj_consume_token(SSComma);
      value();
      jj_consume_token(SSCloseBracket);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HashSetVal() throws ParseException {
                   /*@bgen(jjtree) HashSetVal */
  ASTHashSetVal jjtn000 = new ASTHashSetVal(JJTHASHSETVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      jj_consume_token(SSDot);
      jj_consume_token(DOTSETVAL);
      jj_consume_token(SSOpenBraces);
      Position();
      jj_consume_token(SSComma);
      value();
      jj_consume_token(SSCloseBraces);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void value() throws ParseException {
              /*@bgen(jjtree) value */
  ASTvalue jjtn000 = new ASTvalue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void KeyType() throws ParseException {
                  /*@bgen(jjtree) KeyType */
  ASTKeyType jjtn000 = new ASTKeyType(JJTKEYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimitiveType();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ValueType() throws ParseException {
                    /*@bgen(jjtree) ValueType */
  ASTValueType jjtn000 = new ASTValueType(JJTVALUETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimitiveType();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String Size() throws ParseException {
                 /*@bgen(jjtree) Size */
  ASTSize jjtn000 = new ASTSize(JJTSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
    {if (true) return token.image;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DataTypes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESERVEDWORDHASHMAP:
      Hashmap();
      break;
    case RESERVEDWORDLIST:
      List();
      break;
    case RESERVEDWORDSET:
      Set();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Hashmap() throws ParseException {
                  /*@bgen(jjtree) Hashmap */
                  ASTHashmap jjtn000 = new ASTHashmap(JJTHASHMAP);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);TypeSpec type1;TypeSpec type2;
    try {
      jj_consume_token(RESERVEDWORDHASHMAP);
      jj_consume_token(SSOpenBraces);
      type1 = PrimitiveType();
      jj_consume_token(SSComma);
      type2 = PrimitiveType();
      jj_consume_token(SSCloseBraces);
      jj_consume_token(IDENTIFIER);
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.TYPE);


            TypeSpecImpl temp =  new TypeSpecImpl(TypeFormImpl.MAP);
            temp.setIdentifier(variableId);
            temp.setAttribute(MAP_KEY_TYPE,type1);
            temp.setAttribute(MAP_VALUE_TYPE,type2);

            variableId.setTypeSpec(temp);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(temp);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Set() throws ParseException {
              /*@bgen(jjtree) Set */
              ASTSet jjtn000 = new ASTSet(JJTSET);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);TypeSpec type;String count;
    try {
      jj_consume_token(RESERVEDWORDSET);
      type = PrimitiveType();
      jj_consume_token(SSOpenParen);
      count = Size();
      jj_consume_token(SSCloseParen);
      jj_consume_token(IDENTIFIER);
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.TYPE);


            TypeSpecImpl temp =  new TypeSpecImpl(TypeFormImpl.SET);
            temp.setIdentifier(variableId);
            temp.setAttribute(SET_INDEX_TYPE,type);
            temp.setAttribute(SET_ELEMENT_TYPE,type);
            temp.setAttribute(SET_ELEMENT_COUNT,count);

            variableId.setTypeSpec(temp);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(temp);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void List() throws ParseException {
               /*@bgen(jjtree) List */
               ASTList jjtn000 = new ASTList(JJTLIST);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);TypeSpec type;
    try {
      jj_consume_token(RESERVEDWORDLIST);
      type = PrimitiveType();
      jj_consume_token(IDENTIFIER);
            SymTabEntry variableId = symTabStack.enterLocal(token.image);
            variableId.appendLineNumber(token.beginLine);
            variableId.setIndex(index++);
            variableId.setDefinition(DefinitionImpl.TYPE);

            TypeSpecImpl temp =  new TypeSpecImpl(TypeFormImpl.LIST);
            temp.setIdentifier(variableId);
            temp.setAttribute(LIST_INDEX_TYPE,type);
            temp.setAttribute(LIST_ELEMENT_TYPE,type);

            variableId.setTypeSpec(temp);
            jjtn000.setAttribute(ID, variableId);
            jjtn000.setTypeSpec(temp);
      jj_consume_token(SSOpenBracket);
      jj_consume_token(SSCloseBracket);
      jj_consume_token(SSSemiColon);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static void processVariableDecl(Token token, int index,
                         ArrayList<SymTabEntry> variableList) throws ParseException {
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_3R_45() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETINDEX)) return true;
    if (jj_scan_token(SSDollar)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETINDEX)) return true;
    if (jj_scan_token(SSOpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETVAL)) return true;
    if (jj_scan_token(SSOpenBraces)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETVAL)) return true;
    if (jj_scan_token(SSOpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSEquals)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTREMOVE)) return true;
    if (jj_scan_token(SSOpenBraces)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTREMOVE)) return true;
    if (jj_scan_token(SSOpenBracket)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTREMOVE)) return true;
    if (jj_scan_token(SSOpenParen)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTADD)) return true;
    if (jj_scan_token(SSOpenBraces)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTADD)) return true;
    if (jj_scan_token(SSOpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTADD)) return true;
    if (jj_scan_token(SSOpenParen)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(SSOpenParen)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(SSNot)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(SSComma)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SSSemiColon)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDivideEquals)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSMultEquals)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSMinusEquals)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTSETVAL)) return true;
    if (jj_scan_token(SSOpenBraces)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSPlusEquals)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTSETVAL)) return true;
    if (jj_scan_token(SSOpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETSTRING)) return true;
    if (jj_scan_token(SSOpenBraces)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSminusminus)) return true;
    if (jj_scan_token(SSSemiColon)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETSTRING)) return true;
    if (jj_scan_token(SSOpenParen)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_scan_token(RESERVEDWORDREADINT)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSplusplus)) return true;
    if (jj_scan_token(SSSemiColon)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETSIZE)) return true;
    if (jj_scan_token(SSOpenBraces)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETSIZE)) return true;
    if (jj_scan_token(SSOpenParen)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETSIZE)) return true;
    if (jj_scan_token(SSOpenBracket)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(SSEquals)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(RESERVEDWORDLOCAL)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTCONTAINS)) return true;
    if (jj_scan_token(SSOpenBraces)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(RESERVEDWORDBOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(RESERVEDWORDFLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(RESERVEDWORDDOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(RESERVEDWORDSTRING)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTCONTAINS)) return true;
    if (jj_scan_token(SSOpenParen)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(RESERVEDWORDINT)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTAPPEND)) return true;
    if (jj_scan_token(SSDollar)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTSUBSTRING)) return true;
    if (jj_scan_token(SSDollar)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SSDot)) return true;
    if (jj_scan_token(DOTGETSIZE)) return true;
    if (jj_scan_token(SSDollar)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ExprParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40000000,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e000,0x3e000,0xc0400,0xc0400,0x300100,0x300100,0x0,0x40000800,0x0,0x0,0x0,0x3ed00,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1000,0x0,0x0,0xf800000,0xf800000,0x7ff06a00,0x7ff06a00,0x20,0x400,0xf800000,0x400,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x400,0x400,0x20000,0x10000,0x80000,0x10,0xf800200,0x0,0x200,0x20,0x20,0x400,0x400,0x400,0x400,0xf800200,0x70000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x40002000,0x40002000,0x0,0x38d000,0x0,0x8000,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x38c000,0x38d000,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0xa000,0xa000,0xa000,0xa000,0x2000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[35];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExprParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExprParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExprParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExprParser(ExprParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[95];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 95; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
